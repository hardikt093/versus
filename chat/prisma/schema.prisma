// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int           @id @default(autoincrement())
  email              String        @unique
  password           String
  firstName          String?
  lastName           String?
  userName           String        @unique
  profileImage       String?
  socialLogin        Boolean
  birthDate          String?
  phone              Json?
  createdAt          DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime      @updatedAt @db.Timestamptz(3)
  isDeleted          Boolean       @default(false)
  messagesReceived   Message[]     @relation("fromUserId")
  contactUser        Contact[]     @relation("contactUserId")
  contact            Contact[]     @relation("userId")
  invite             Invite[]
  googleAccessToken  String?
  googleRefreshToken String?
  googleIdToken      String?
  isContactScope     Boolean?
  isSignUp           isSignUp      @default(PENDING)
  wallet             Wallet?
  holdAmount         HoldAmount[]
  conversation       Channel?      @relation(fields: [conversationId], references: [id])
  conversationId     Int?
  // messageReaction    MessageReaction[] @relation("reactionUserId")
  reportedBy         reportUser[]  @relation("reportedBy")
  reportedTo         reportUser[]  @relation("reportedTo")
  channelUser        channelUser[] @relation("channelUser")
  adminAccess        channelUser[] @relation("adminAccess")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String
  user      Int
  type      Int
  expiresAt String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  isDeleted Boolean  @default(false)
}

model Channel {
  id                Int           @id @default(autoincrement())
  channelType       ChannelType
  admin             User[]
  channelName       String?
  matchChannelName  String?
  description       String?
  goalServeMatchId  Int?
  goalServeLeagueId Int?
  matchStartAt      DateTime?
  channelStartAt    DateTime?
  channelExpiredAt  DateTime?
  createdAt         DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime      @updatedAt @db.Timestamptz(3)
  isDeleted         Boolean       @default(false)
  message           Message[]
  channelUser       channelUser[]
  reportUser        reportUser[]
}

model Message {
  id              Int          @id @default(autoincrement())
  user            User?        @relation(name: "fromUserId", fields: [userId], references: [id])
  userId          Int?
  messageType     String
  parentMessageId Int?
  text            String
  mediaUrl        String[]
  createdAt       DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime     @updatedAt @db.Timestamptz(3)
  channel         Channel?     @relation(fields: [channelId], references: [id])
  channelId       Int?
  parentMessage   Message?     @relation("childMessages", fields: [parentMessageId], references: [id])
  childMessages   Message[]    @relation("childMessages")
  reportUser      reportUser[]
}

// model MessageReaction {
//   id        Int      @id @default(autoincrement())
//   message   Message? @relation(fields: [messageId], references: [id])
//   messageId Int?
//   reaction  String
//   user      User?    @relation(name: "reactionUserId", fields: [userId], references: [id])
//   userId    Int?
// }

// model chatInvite {
//   id              Int           @id @default(autoincrement())
//   conversation    Conversation? @relation(fields: [conversationId], references: [id])
//   conversationId  Int?
//   user            User?         @relation("invitedTo", fields: [userId], references: [id])
//   userId          Int?
//   invitedBy       User?         @relation(name: "invitingUser", fields: [invitedByUserId], references: [id])
//   invitedByUserId Int?
// }

model channelUser {
  id               Int         @id @default(autoincrement())
  channelType      ChannelType
  user             User?       @relation(name: "channelUser", fields: [userId], references: [id])
  userId           Int?
  adminAccess      User?       @relation(name: "adminAccess", fields: [adminAccessId], references: [id])
  adminAccessId    Int?
  channel          Channel?    @relation(fields: [conversationId], references: [id])
  conversationId   Int?
  permisionGranted String
}

model reportUser {
  id               Int      @id @default(autoincrement())
  channel          Channel? @relation(fields: [channelId], references: [id])
  channelId        Int?
  reportedBy       User?    @relation(name: "reportedBy", fields: [reportedByUserId], references: [id])
  reportedByUserId Int?
  reportedTo       User?    @relation(name: "reportedTo", fields: [reportedToUserId], references: [id])
  reportedToUserId Int?
  description      String
  message          Message? @relation(fields: [messageId], references: [id])
  messageId        Int?
}

enum Status {
  online
  offline
}

enum ChannelType {
  oneToOne
  matchChannel
  privateChannel
}

model Contact {
  id            Int        @id @default(autoincrement())
  name          String?
  email         String?
  phoneNumber   String?
  contactUserId Int?
  contactUser   User?      @relation(name: "contactUserId", fields: [contactUserId], references: [id])
  userId        Int?
  user          User?      @relation(name: "userId", fields: [userId], references: [id])
  invite        inviteSend @default(PENDING)
  sendInvite    Invite[]
  createdAt     DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime   @updatedAt @db.Timestamptz(3)
  isDeleted     Boolean    @default(false)
}

model Invite {
  id                Int      @id @default(autoincrement())
  token             String   @unique @db.Uuid
  expire            DateTime
  sendInviteBy      Int
  sendInviteContact Int
  contact           Contact? @relation(fields: [sendInviteContact], references: [id])
  user              User?    @relation(fields: [sendInviteBy], references: [id])
  createdAt         DateTime @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime @updatedAt @db.Timestamptz(3)
}

enum inviteSend {
  SENT
  ACCEPTED
  PENDING
}

enum isSignUp {
  SUCCESS
  PENDING
}

model Wallet {
  id         Int          @id @default(autoincrement())
  user       User?        @relation(fields: [userId], references: [id])
  userId     Int          @unique
  amount     Float?
  holdAmount HoldAmount[]
}

model HoldAmount {
  id                    Int     @id @default(autoincrement())
  user                  User?   @relation(fields: [userId], references: [id])
  userId                Int?
  amount                Float?
  wallet                Wallet? @relation(fields: [walletId], references: [id])
  walletId              Int
  goalServeMatchId      Int?
  requestUserId         Int?
  opponentUserId        Int?
  requestUserBetAmount  Float?
  opponentUserBetAmount Float?
  goalServeLeagueId     Int?
  betId                 String?
  revertAmount          Float?
}
