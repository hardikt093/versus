// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  email            String    @unique
  password         String
  firstName        String?
  lastName         String?
  userName         String    @unique
  profileImage     String?
  socialLogin      Boolean
  birthDate        String?
  phone            Json?
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(3)
  isDeleted        Boolean   @default(false)
  contacts         ContactTry[] @relation("contactToUserId")
  messagesSent     Message[] @relation("toUserId")
  messagesReceived Message[] @relation("fromUserId")
  contactUser Contact[] @relation("contactUserId")
  contactsUser     ContactTry[] @relation("contactToUserUserId")
  contact Contact[] @relation("userId")
  invite Invite[]
  reactionUser     MessageReaction[]  @relation("reactionfromUserId")
  threadUser       Threads[]  @relation("threadfromUserId")    
  googleAccessToken String?
  googleRefreshToken String?
  googleIdToken String?
  isContactScope Boolean?
  isSignUp isSignUp @default(PENDING)
  wallet Wallet?
  holdAmount HoldAmount[]
}

model Token {
  id     Int     @id @default(autoincrement())
  token    String
  user Int   
  type Int
  expiresAt String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  isDeleted Boolean  @default(false)
}

model Conversation {
  id           Int       @id @default(autoincrement())
  participants Int[]
  messages     Message[]
  contacts     ContactTry[]
}

model ContactTry {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  unreadMessages Int          @default(0)
  status         Status       @default(offline)
  createdAt      DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(3)
  User           User?        @relation(name:"contactToUserId",fields: [userId], references: [id])
  userId         Int?
  contactUser    User?        @relation(name: "contactToUserUserId",fields: [contactUserId], references: [id])
  contactUserId  Int?

}

model Message {
  id             Int           @id @default(autoincrement())
  from           User?         @relation(name: "fromUserId", fields: [fromId], references: [id])
  fromId         Int?
  to             User?         @relation(name: "toUserId", fields: [toId], references: [id])
  toId           Int?
  text           String
  filePath       String[]
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime      @updatedAt @db.Timestamptz(3)
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId Int?
  reaction      MessageReaction[]
  threads       Threads[]
}

model MessageReaction {
  id             Int           @id @default(autoincrement())
  message        Message?      @relation(fields: [messageId], references: [id])
  messageId      Int?
  reaction       String
  from           User?         @relation(name: "reactionfromUserId", fields: [fromId], references: [id])
  fromId         Int?         
}

model Threads {
  id             Int           @id @default(autoincrement())
  message        Message?      @relation(fields: [messageId], references: [id])
  messageId      Int?
  from           User?         @relation(name: "threadfromUserId", fields: [fromId], references: [id])
  fromId         Int?
  text           String
  filePath       String?
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime      @updatedAt @db.Timestamptz(3)
}

enum Status {
  online
  offline
}
model Contact {
  id     Int     @id @default(autoincrement())
  name String?
  email String? 
  phoneNumber String? 
 contactUserId Int?
  contactUser User? @relation(name: "contactUserId",fields: [contactUserId], references: [id])
  userId Int?
  user   User? @relation(name: "userId",fields: [userId], references: [id])
  invite inviteSend @default(PENDING)
  sendInvite Invite[]
  createdAt          DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime  @updatedAt @db.Timestamptz(3)
  isDeleted Boolean  @default(false)
}

model Invite {
  id     Int     @id @default(autoincrement())
  token String @unique @db.Uuid
  expire DateTime
  sendInviteBy Int
  sendInviteContact Int
  contact   Contact? @relation(fields: [sendInviteContact], references: [id])
  user   User? @relation(fields: [sendInviteBy], references: [id])
  createdAt          DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime  @updatedAt @db.Timestamptz(3)
}

enum inviteSend {
  SENT
  ACCEPTED
  PENDING
}

enum isSignUp {
  SUCCESS
  PENDING
}


model Wallet {
  id     Int     @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int  @unique
  amount Int
  holdAmount HoldAmount[]
}
model HoldAmount {
    id     Int     @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int?  
  amount Int
  wallet Wallet? @relation(fields: [walletId], references: [id])
  walletId  Int
}